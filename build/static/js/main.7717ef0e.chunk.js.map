{"version":3,"sources":["components/contact-form/ContactForm.module.css","components/App.module.css","components/contact-list-item/ContactListItem.module.css","components/contact-list/ContactList.module.css","components/contact-list/transitions/pop.module.css","components/filter/Filter.module.css","redux/contacts/contacts-types.js","redux/contacts/contacts-actions.js","components/contact-form/ContactForm.jsx","components/contact-list-item/ContactListItem.jsx","components/contact-list/ContactList.jsx","components/contact-list/ContactList.container.js","components/filter/Filter.jsx","components/App.jsx","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["module","exports","handleInput","createAction","types","createContact","handleRemove","ContactForm","state","name","number","event","target","value","setState","handleSubmit","preventDefault","entryCheck","props","contacts","find","contact","alert","length","contactNew","id","nanoid","resetForm","this","onSubmit","className","styles","addContactForm","label","type","placeholder","input","onChange","btnAdd","Component","mapDispatchToProps","connect","items","data-id","onClick","btnDelete","ContactList","TransitionGroup","component","list","map","CSSTransition","timeout","classNames","popTransition","contactListItem","getFilteredContacts","filter","item","toLowerCase","includes","autoComplete","App","container","contactsTitle","contactsReducer","createReducer","payload","filterReducer","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","ContactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.7717ef0e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"addContactForm\":\"ContactForm_addContactForm__2SNN3\",\"label\":\"ContactForm_label__u9D1a\",\"input\":\"ContactForm_input__3J0J3\",\"text\":\"ContactForm_text__1M-wa\",\"btnAdd\":\"ContactForm_btnAdd__2K0tK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3rn_7\",\"contacts\":\"App_contacts__1IN3r\",\"contactsTitle\":\"App_contactsTitle__2qcxx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnDelete\":\"ContactListItem_btnDelete__HavdW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2fA6d\",\"contactListItem\":\"ContactList_contactListItem__iC-Sp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"pop_enter__2uftK\",\"enterActive\":\"pop_enterActive__AEHfC\",\"exit\":\"pop_exit__DvUdh\",\"exitActive\":\"pop_exitActive__1b6Hr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__1Axcw\"};","const INPUT = 'contacts/handleInput';\r\nconst CREATE = 'contacts/createContact';\r\nconst REMOVE = 'contacts/handleRemove';\r\n\r\nexport default { INPUT, CREATE, REMOVE };\r\n","import { createAction } from '@reduxjs/toolkit';\r\nimport types from './contacts-types';\r\n\r\n// export const handleInput = item => ({\r\n//   type: types.INPUT,\r\n//   payload: item,\r\n// });\r\n\r\n// export const createContact = contact => ({\r\n//   type: types.CREATE,\r\n//   payload: contact,\r\n// });\r\n\r\n// export const handleRemove = id => ({\r\n//   type: types.REMOVE,\r\n//   payload: id,\r\n// });\r\n\r\n// ---------------\r\n\r\nexport const handleInput = createAction(types.INPUT);\r\n\r\nexport const createContact = createAction(types.CREATE);\r\n\r\nexport const handleRemove = createAction(types.REMOVE);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createContact } from '../../redux/contacts/contacts-actions';\r\nimport { nanoid } from '@reduxjs/toolkit';\r\n// import { v4 as uuidv4 } from 'uuid';\r\nimport styles from './ContactForm.module.css';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  handleInput = event => {\r\n    const { name, value } = event.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    const { name, number } = this.state;\r\n\r\n    const entryCheck = this.props.contacts.find(\r\n      contact => contact.name === name || contact.number === number,\r\n    );\r\n\r\n    if (entryCheck) {\r\n      alert(\r\n        `Either '${entryCheck.name}' or '${entryCheck.number}' already exists`,\r\n      );\r\n      // this.resetForm();\r\n    } else if (name.length === 0 || number.length === 0) {\r\n      alert(`Please, fill in all the fields`);\r\n      // this.resetForm();\r\n    } else {\r\n      const contactNew = {\r\n        // id: uuidv4(),\r\n        id: nanoid(),\r\n        name,\r\n        number,\r\n      };\r\n      this.props.createContact(contactNew);\r\n    }\r\n    this.resetForm();\r\n  };\r\n\r\n  resetForm = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.handleSubmit} className={styles.addContactForm}>\r\n          <label className={styles.label}>Name:</label>\r\n          <input\r\n            name=\"name\"\r\n            type=\"text\"\r\n            placeholder=\"Name Surname\"\r\n            className={styles.input}\r\n            onChange={this.handleInput}\r\n            value={name}\r\n          />\r\n          <label className={styles.label}>Number:</label>\r\n          <input\r\n            name=\"number\"\r\n            type=\"text\"\r\n            // type=\"tel\"\r\n            placeholder=\"123-456\"\r\n            // pattern=\"[0-9]{3}-[0-9]{3}\"\r\n            className={styles.input}\r\n            onChange={this.handleInput}\r\n            value={number}\r\n          />\r\n          {/* <span className={styles.text}>\r\n            <i>Use this format only:</i> xxx-xxx\r\n          </span> */}\r\n          <button type=\"submit\" className={styles.btnAdd}>\r\n            Add contact\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: state.contacts.items,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  createContact,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { handleRemove } from '../../redux/contacts/contacts-actions';\r\nimport styles from './ContactListItem.module.css';\r\n\r\nconst ContactListItem = ({ id, name, number, handleRemove }) => {\r\n  return (\r\n    <>\r\n      <p className={styles.contact}>\r\n        {name}: {number}\r\n      </p>\r\n\r\n      <button\r\n        data-id={id}\r\n        onClick={event => handleRemove(id)}\r\n        type=\"button\"\r\n        className={styles.btnDelete}\r\n      >\r\n        Delete\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nContactListItem.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  handleRemove: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  // contacts: state.contacts,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  handleRemove,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactListItem);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ContactListItem from '../contact-list-item/ContactListItem';\r\n// import { connect } from 'react-redux';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport popTransition from './transitions/pop.module.css';\r\n// import slideTransition from './transitions/slide.module.css';\r\nimport styles from './ContactList.module.css';\r\n\r\nconst ContactList = ({ contacts }) => {\r\n  return (\r\n    <div className=\"contactsList\">\r\n      {contacts.length === 0 ? (\r\n        <p>There are no contacts here yet ...</p>\r\n      ) : (\r\n        <TransitionGroup component=\"ul\" className={styles.list}>\r\n          {/* <ul className={styles.list}> */}\r\n          {contacts.map(contact => (\r\n            <CSSTransition\r\n              key={contact.id}\r\n              timeout={200}\r\n              classNames={popTransition}\r\n            >\r\n              <li className={styles.contactListItem} key={contact.id}>\r\n                <ContactListItem {...contact} />\r\n              </li>\r\n            </CSSTransition>\r\n          ))}\r\n          {/* </ul> */}\r\n        </TransitionGroup>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.array.isRequired,\r\n  // onRemove: PropTypes.func.isRequired,\r\n};\r\n\r\n// const getFilteredContacts = state => {\r\n//   const { filter, items } = state.contacts;\r\n//   // const { contacts } = this.state;\r\n//   return items.filter(item =>\r\n//     item.name.toLowerCase().includes(filter.toLowerCase()),\r\n//   );\r\n// };\r\n\r\n// const mapStateToProps = state => ({\r\n//   contacts: getFilteredContacts(state),\r\n// });\r\n\r\n// const mapDispatchToProps = {};\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n\r\nexport default ContactList;\r\n","import { connect } from 'react-redux';\r\nimport ContactList from './ContactList';\r\n\r\nconst getFilteredContacts = state => {\r\n  const { filter, items } = state.contacts;\r\n  // const { contacts } = this.state;\r\n  return items.filter(item =>\r\n    item.name.toLowerCase().includes(filter.toLowerCase()),\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: getFilteredContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { handleInput } from '../../redux/contacts/contacts-actions';\r\nimport styles from './Filter.module.css';\r\n\r\nconst Filter = ({ contacts, filter, handleInput }) => {\r\n  return (\r\n    <>\r\n      {contacts.length < 2 ? (\r\n        <span> </span>\r\n      ) : (\r\n        <div className=\"contactsFilter\">\r\n          <p>Find contacts by name:</p>\r\n          <input\r\n            name=\"filter\"\r\n            type=\"text\"\r\n            autoComplete=\"off\"\r\n            className={styles.input}\r\n            onChange={event => handleInput(event.target.value)}\r\n            value={filter}\r\n          />\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  filter: PropTypes.string.isRequired,\r\n  handleInput: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  filter: state.contacts.filter,\r\n  contacts: state.contacts.items,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  handleInput,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ContactForm from './contact-form/ContactForm';\r\nimport ContactList from './contact-list/ContactList.container';\r\nimport Filter from './filter/Filter';\r\nimport styles from './App.module.css';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    contacts: [\r\n      // { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n      // { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n      // { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n      // { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n    ],\r\n    filter: '',\r\n  };\r\n\r\n  // componentDidMount() {\r\n  //   const contacts = localStorage.getItem('contacts');\r\n  //   const parsedContacts = JSON.parse(contacts);\r\n\r\n  //   if (parsedContacts) {\r\n  //     this.setState({ contacts: [...parsedContacts] });\r\n  //   }\r\n  // }\r\n\r\n  // componentDidUpdate(_, prevState) {\r\n  //   if (this.state.contacts !== prevState.contacts) {\r\n  //     localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\r\n  //   }\r\n  // }\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.container}>\r\n        <h2>Phonebook</h2>\r\n        <ContactForm />\r\n\r\n        <div className={styles.contacts}>\r\n          <h3 className={styles.contactsTitle}>Contacts</h3>\r\n          <Filter />\r\n          <ContactList />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: state.contacts,\r\n  filter: state.filter,\r\n});\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport { combineReducers } from 'redux';\r\nimport { createContact, handleRemove, handleInput } from './contacts-actions';\r\n\r\nconst contactsReducer = createReducer([], {\r\n  [createContact]: (state, { payload }) => [...state, payload],\r\n  [handleRemove]: (state, { payload }) => [\r\n    ...state.filter(contact => contact.id !== payload),\r\n  ],\r\n});\r\n\r\nconst filterReducer = createReducer('', {\r\n  [handleInput]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items: contactsReducer,\r\n  filter: filterReducer,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport contactsReducer from './contacts/contacts-reducer';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst ContactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(ContactsPersistConfig, contactsReducer),\r\n  },\r\n  middleware,\r\n  // devTools: process.env.NODE_ENV !== 'production',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nimport App from './components/App';\nimport store from './redux/store';\n\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}